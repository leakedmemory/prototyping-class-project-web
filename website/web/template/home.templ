package template

import (
	"fmt"
	"strconv"
	"time"
	"website/internal/models"
)

type UserData struct {
	Name  string
	Email string
	Phone string
	Pets  []models.Pet
}

templ Home(data UserData) {
	@doctype() {
		@head("Home") {
			<link rel="stylesheet" href="/static/css/home.css"/>
			<script type="module" src="/static/js/home.js"></script>
		}
		@body() {
			<main>
				@user(data)
				@PetList(data)
			</main>
			@addPetModal()
		}
	}
}

templ user(data UserData) {
	<div class="container user">
		<image
			class="user-icon"
			src="https://cdn4.iconfinder.com/data/icons/glyphs/24/icons_user2-256.png"
			alt="Ícone de usuário"
		></image>
		<div class="user-credentials">
			<span>Nome: { data.Name }</span>
			<span>Email: { data.Email }</span>
			<span>Telefone: { data.Phone }</span>
		</div>
	</div>
}

templ PetList(data UserData) {
	<div class="container pet-list">
		<div class="pet-header-line">
			<span class="pet-num">PETS ({ strconv.FormatInt(int64(len(data.Pets)), 10) })</span>
			<image
				id="show-pet-modal"
				class="show-pet-modal"
				src="https://cdn4.iconfinder.com/data/icons/glyphs/24/icons_add-256.png"
				alt="Ícone de círculo com um vazado de símbolo de adição"
			></image>
		</div>
		<div class="container pets-container">
			<div class="pets">
				for _, pet := range data.Pets {
					@petData(&pet)
				}
			</div>
		</div>
	</div>
}

templ petData(pet *models.Pet) {
	<div class="pet">
		@petDataContainer(fmt.Sprintf("Nome: %s", pet.Name))
		if dateDiffInYears(pet.DateOfBirth) > 0 {
			@petDataContainer(fmt.Sprintf("Idade: %s anos", strconv.FormatInt(dateDiffInYears(pet.DateOfBirth), 10)))
		} else {
			@petDataContainer(fmt.Sprintf("Idade: %s meses", strconv.FormatInt(dateDiffInMonths(pet.DateOfBirth), 10)))
		}
		@petDataContainer(fmt.Sprintf("Tipo: %s", pet.Type))
		@petDataContainer(fmt.Sprintf("Raça: %s", pet.Breed))
	</div>
}

func dateDiffInYears(date time.Time) int64 {
	return int64(time.Now().Sub(date).Hours() / 24 / 365)
}

func dateDiffInMonths(date time.Time) int64 {
	return int64(time.Now().Sub(date).Hours() / 24 / 30)
}

templ petDataContainer(data string) {
	<div class="pet-data-container">
		<image
			class="pet-data-icon"
			src="https://cdn0.iconfinder.com/data/icons/phosphor-light-vol-3/256/paw-print-light-256.png"
			alt="Ícone em formato de pata de cachorro"
		></image>
		<span class="pet-data">{ data }</span>
	</div>
}

templ addPetModal() {
	<dialog id="add-pet-modal">
		<article>
			<h2>Adicionar Pet</h2>
			<form id="pet-form" hx-post="/pet/create" hx-target=".pet-list" hx-swap="outerHTML">
				<label>
					Nome:
					<input
						name="name"
						type="text"
						placeholder="Insira o nome do pet"
						required
					/>
				</label>
				<label>
					Data de nascimento:
					<input
						name="date-of-birth"
						type="date"
						required
					/>
				</label>
				<label>
					Tipo:
					<input
						name="type"
						type="text"
						placeholder="Gato, Cachorro"
						required
					/>
				</label>
				<label>
					Raça:
					<input
						name="breed"
						type="text"
						placeholder="Insira a raça do pet"
						required
					/>
				</label>
			</form>
			<footer>
				<button id="cancel" class="secondary">Cancelar</button>
				<button id="add-pet" type="submit" form="pet-form" style="width: auto; margin-bottom: 0;">Adicionar</button>
			</footer>
		</article>
	</dialog>
}
